/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        if (l1.val == 0)
            return l2;
        if (l2.val == 0)
            return l1;
        
        int num1 = getNumber(l1);
        int num2 = getNumber(l2);

        int ans = num1 + num2;
        ListNode ansList = new ListNode(-1);
        ListNode pointer = ansList;

        while (ans != 0) {
            ListNode tmp = new ListNode(ans % 10);
            ans /= 10;
            pointer.next = tmp;
            pointer = tmp;
        }
        return ansList.next;
    }

    private int getNumber(ListNode l) {
        ListNode p = l;
        int size = 0;
        int num = 0;

        while (p != null) {
            p = p.next;
            size++;
        }
        p = l;
        for (int i = 0; i < size; i++) {
            num += p.val * Math.pow(10, i);
            p = p.next;
        }
        return num;
    }
}
//total_testcases:1568
//total_correct:639
//input_formatted:"[9],[1,9,9,9,9,9,9,9,9,9]"
//expected_output:[0,0,0,0,0,0,0,0,0,0,1]
//code_output:[0,-4,-6,-3,-8,-4,-7,-4,-1,-2]
